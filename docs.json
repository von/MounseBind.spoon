[
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [
      {
        "doc" : "Example callback that lets one move a window by using a modifier key with a mouse\ndrag event. Usage:\nMouseBind: createBinding({\"alt\"}, \"leftMouseDragged\", nil, MouseBind.dragWindowExample)\n\nParameters:\n * event - hs.eventtap.event instance\n\nReturns:\n * delete - a boolean, true if the event should be deleted, false if it should\n   propagate to any other applications watching for that event.\n * events - Optional table of events to post.",
        "name" : "dragWindowExample",
        "parameters" : [
          " * event - hs.eventtap.event instance",
          ""
        ],
        "stripped_doc" : [
          "Example callback that lets one move a window by using a modifier key with a mouse",
          "drag event. Usage:",
          "MouseBind: createBinding({\"alt\"}, \"leftMouseDragged\", nil, MouseBind.dragWindowExample)",
          ""
        ],
        "notes" : [

        ],
        "signature" : "MouseBind:dragWindowExample()",
        "type" : "Function",
        "returns" : [
          " * delete - a boolean, true if the event should be deleted, false if it should",
          "   propagate to any other applications watching for that event.",
          " * events - Optional table of events to post."
        ],
        "desc" : "Example callback that lets one move a window by using a modifier key with a mouse",
        "def" : "MouseBind:dragWindowExample()"
      }
    ],
    "Variable" : [

    ],
    "stripped_doc" : [

    ],
    "desc" : "stack to work as described in http:\/\/www.hammerspoon.org\/faq\/",
    "Deprecated" : [

    ],
    "type" : "Module",
    "Constructor" : [

    ],
    "doc" : "Allows binding mouse actions to functions. Requires access to the Mac accessibility\nstack to work as described in http:\/\/www.hammerspoon.org\/faq\/\nAllows binding to any events described in hs.eventtap.event.types which is actually\nmore than mouse events, but it's not intended to replace hs.hotkey, which is\nmore effective for binding to key presses.",
    "Method" : [
      {
        "doc" : "Enable or disable debugging\n\nParameters:\n * enable - Boolean indicating whether debugging should be on\n\nReturns:\n * Nothing",
        "name" : "debug",
        "parameters" : [
          " * enable - Boolean indicating whether debugging should be on",
          ""
        ],
        "stripped_doc" : [
          "Enable or disable debugging",
          ""
        ],
        "notes" : [

        ],
        "signature" : "MouseBind:debug(enable)",
        "type" : "Method",
        "returns" : [
          " * Nothing"
        ],
        "desc" : "Enable or disable debugging",
        "def" : "MouseBind:debug(enable)"
      },
      {
        "doc" : "Initializes a MouseBind\nWhen a user calls hs.loadSpoon(), Hammerspoon will load and execute init.lua\nfrom the relevant s.\nDo generally not perform any work, map any hotkeys, start any timers\/watchers\/etc.\nin the main scope of your init.lua. Instead, it should simply prepare an object\nwith methods to be used later, then return the object.\n\nParameters:\n * None\n\nReturns:\n * MouseBind object",
        "name" : "init",
        "parameters" : [
          " * None",
          ""
        ],
        "stripped_doc" : [
          "Initializes a MouseBind",
          "When a user calls hs.loadSpoon(), Hammerspoon will load and execute init.lua",
          "from the relevant s.",
          "Do generally not perform any work, map any hotkeys, start any timers\/watchers\/etc.",
          "in the main scope of your init.lua. Instead, it should simply prepare an object",
          "with methods to be used later, then return the object.",
          ""
        ],
        "notes" : [

        ],
        "signature" : "MouseBind:init()",
        "type" : "Method",
        "returns" : [
          " * MouseBind object"
        ],
        "desc" : "Initializes a MouseBind",
        "def" : "MouseBind:init()"
      },
      {
        "doc" : "Start background activity.\n\nParameters:\n * param - Some parameter\n\nReturns:\n * MouseBind object",
        "name" : "start",
        "parameters" : [
          " * param - Some parameter",
          ""
        ],
        "stripped_doc" : [
          "Start background activity.",
          ""
        ],
        "notes" : [

        ],
        "signature" : "MouseBind:start()",
        "type" : "Method",
        "returns" : [
          " * MouseBind object"
        ],
        "desc" : "Start background activity.",
        "def" : "MouseBind:start()"
      },
      {
        "doc" : "Stop background activity.\n\nParameters:\n * param - Some parameter\n\nReturns:\n * MouseBind object",
        "name" : "stop",
        "parameters" : [
          " * param - Some parameter",
          ""
        ],
        "stripped_doc" : [
          "Stop background activity.",
          ""
        ],
        "notes" : [

        ],
        "signature" : "MouseBind:stop()",
        "type" : "Method",
        "returns" : [
          " * MouseBind object"
        ],
        "desc" : "Stop background activity.",
        "def" : "MouseBind:stop()"
      },
      {
        "doc" : "Create a new binding between a mouse event and an action. Returns a\nMouseBinding object.\nThis is a wrapper around MouseBinding.new():enable()\n\nParameters:\n * mods - A table or a string containing (as elements, or as substrings with any\n   separator) the keyboard modifiers required, which should be zero or more of the\n   following:\n     \"cmd\", \"command\" or \"⌘\"\n     \"ctrl\", \"control\" or \"⌃\"\n     \"alt\", \"option\" or \"⌥\"\n     \"shift\" or \"⇧\"\n * typeName - A string containing the name of an event type, as described in\n   hs.eventtap.event.types\n * message - A string containing a message to be displayed via hs.alert()\n   when the mouse event has been triggered; if nil, no alert will be shown\n   Note that unlike hs.hotkey, this parameter must be present.\n * fn - A function that will be called when mouse event is detected.\n\nReturns:\n *  MouseBinding istance.",
        "name" : "createBinding",
        "parameters" : [
          " * mods - A table or a string containing (as elements, or as substrings with any",
          "   separator) the keyboard modifiers required, which should be zero or more of the",
          "   following:",
          "     \"cmd\", \"command\" or \"⌘\"",
          "     \"ctrl\", \"control\" or \"⌃\"",
          "     \"alt\", \"option\" or \"⌥\"",
          "     \"shift\" or \"⇧\"",
          " * typeName - A string containing the name of an event type, as described in",
          "   hs.eventtap.event.types",
          " * message - A string containing a message to be displayed via hs.alert()",
          "   when the mouse event has been triggered; if nil, no alert will be shown",
          "   Note that unlike hs.hotkey, this parameter must be present.",
          " * fn - A function that will be called when mouse event is detected.",
          ""
        ],
        "stripped_doc" : [
          "Create a new binding between a mouse event and an action. Returns a",
          "MouseBinding object.",
          "This is a wrapper around MouseBinding.new():enable()",
          ""
        ],
        "notes" : [

        ],
        "signature" : "MouseBind:createBinding()",
        "type" : "Method",
        "returns" : [
          " *  MouseBinding istance."
        ],
        "desc" : "Create a new binding between a mouse event and an action. Returns a",
        "def" : "MouseBind:createBinding()"
      },
      {
        "doc" : "Log all events. Intended for debugging.\n\nParameters:\n * enable   boolean indicating if logging should be started or stopped.\n\nReturns:\n * Nothing",
        "name" : "debugEvents",
        "parameters" : [
          " * enable   boolean indicating if logging should be started or stopped.",
          ""
        ],
        "stripped_doc" : [
          "Log all events. Intended for debugging.",
          ""
        ],
        "notes" : [

        ],
        "signature" : "MouseBind:debugEvents()",
        "type" : "Method",
        "returns" : [
          " * Nothing"
        ],
        "desc" : "Log all events. Intended for debugging.",
        "def" : "MouseBind:debugEvents()"
      }
    ],
    "Command" : [

    ],
    "Field" : [

    ],
    "items" : [
      {
        "doc" : "Example callback that lets one move a window by using a modifier key with a mouse\ndrag event. Usage:\nMouseBind: createBinding({\"alt\"}, \"leftMouseDragged\", nil, MouseBind.dragWindowExample)\n\nParameters:\n * event - hs.eventtap.event instance\n\nReturns:\n * delete - a boolean, true if the event should be deleted, false if it should\n   propagate to any other applications watching for that event.\n * events - Optional table of events to post.",
        "name" : "dragWindowExample",
        "parameters" : [
          " * event - hs.eventtap.event instance",
          ""
        ],
        "stripped_doc" : [
          "Example callback that lets one move a window by using a modifier key with a mouse",
          "drag event. Usage:",
          "MouseBind: createBinding({\"alt\"}, \"leftMouseDragged\", nil, MouseBind.dragWindowExample)",
          ""
        ],
        "notes" : [

        ],
        "signature" : "MouseBind:dragWindowExample()",
        "type" : "Function",
        "returns" : [
          " * delete - a boolean, true if the event should be deleted, false if it should",
          "   propagate to any other applications watching for that event.",
          " * events - Optional table of events to post."
        ],
        "desc" : "Example callback that lets one move a window by using a modifier key with a mouse",
        "def" : "MouseBind:dragWindowExample()"
      },
      {
        "doc" : "Create a new binding between a mouse event and an action. Returns a\nMouseBinding object.\nThis is a wrapper around MouseBinding.new():enable()\n\nParameters:\n * mods - A table or a string containing (as elements, or as substrings with any\n   separator) the keyboard modifiers required, which should be zero or more of the\n   following:\n     \"cmd\", \"command\" or \"⌘\"\n     \"ctrl\", \"control\" or \"⌃\"\n     \"alt\", \"option\" or \"⌥\"\n     \"shift\" or \"⇧\"\n * typeName - A string containing the name of an event type, as described in\n   hs.eventtap.event.types\n * message - A string containing a message to be displayed via hs.alert()\n   when the mouse event has been triggered; if nil, no alert will be shown\n   Note that unlike hs.hotkey, this parameter must be present.\n * fn - A function that will be called when mouse event is detected.\n\nReturns:\n *  MouseBinding istance.",
        "name" : "createBinding",
        "parameters" : [
          " * mods - A table or a string containing (as elements, or as substrings with any",
          "   separator) the keyboard modifiers required, which should be zero or more of the",
          "   following:",
          "     \"cmd\", \"command\" or \"⌘\"",
          "     \"ctrl\", \"control\" or \"⌃\"",
          "     \"alt\", \"option\" or \"⌥\"",
          "     \"shift\" or \"⇧\"",
          " * typeName - A string containing the name of an event type, as described in",
          "   hs.eventtap.event.types",
          " * message - A string containing a message to be displayed via hs.alert()",
          "   when the mouse event has been triggered; if nil, no alert will be shown",
          "   Note that unlike hs.hotkey, this parameter must be present.",
          " * fn - A function that will be called when mouse event is detected.",
          ""
        ],
        "stripped_doc" : [
          "Create a new binding between a mouse event and an action. Returns a",
          "MouseBinding object.",
          "This is a wrapper around MouseBinding.new():enable()",
          ""
        ],
        "notes" : [

        ],
        "signature" : "MouseBind:createBinding()",
        "type" : "Method",
        "returns" : [
          " *  MouseBinding istance."
        ],
        "desc" : "Create a new binding between a mouse event and an action. Returns a",
        "def" : "MouseBind:createBinding()"
      },
      {
        "doc" : "Enable or disable debugging\n\nParameters:\n * enable - Boolean indicating whether debugging should be on\n\nReturns:\n * Nothing",
        "name" : "debug",
        "parameters" : [
          " * enable - Boolean indicating whether debugging should be on",
          ""
        ],
        "stripped_doc" : [
          "Enable or disable debugging",
          ""
        ],
        "notes" : [

        ],
        "signature" : "MouseBind:debug(enable)",
        "type" : "Method",
        "returns" : [
          " * Nothing"
        ],
        "desc" : "Enable or disable debugging",
        "def" : "MouseBind:debug(enable)"
      },
      {
        "doc" : "Log all events. Intended for debugging.\n\nParameters:\n * enable   boolean indicating if logging should be started or stopped.\n\nReturns:\n * Nothing",
        "name" : "debugEvents",
        "parameters" : [
          " * enable   boolean indicating if logging should be started or stopped.",
          ""
        ],
        "stripped_doc" : [
          "Log all events. Intended for debugging.",
          ""
        ],
        "notes" : [

        ],
        "signature" : "MouseBind:debugEvents()",
        "type" : "Method",
        "returns" : [
          " * Nothing"
        ],
        "desc" : "Log all events. Intended for debugging.",
        "def" : "MouseBind:debugEvents()"
      },
      {
        "doc" : "Initializes a MouseBind\nWhen a user calls hs.loadSpoon(), Hammerspoon will load and execute init.lua\nfrom the relevant s.\nDo generally not perform any work, map any hotkeys, start any timers\/watchers\/etc.\nin the main scope of your init.lua. Instead, it should simply prepare an object\nwith methods to be used later, then return the object.\n\nParameters:\n * None\n\nReturns:\n * MouseBind object",
        "name" : "init",
        "parameters" : [
          " * None",
          ""
        ],
        "stripped_doc" : [
          "Initializes a MouseBind",
          "When a user calls hs.loadSpoon(), Hammerspoon will load and execute init.lua",
          "from the relevant s.",
          "Do generally not perform any work, map any hotkeys, start any timers\/watchers\/etc.",
          "in the main scope of your init.lua. Instead, it should simply prepare an object",
          "with methods to be used later, then return the object.",
          ""
        ],
        "notes" : [

        ],
        "signature" : "MouseBind:init()",
        "type" : "Method",
        "returns" : [
          " * MouseBind object"
        ],
        "desc" : "Initializes a MouseBind",
        "def" : "MouseBind:init()"
      },
      {
        "doc" : "Start background activity.\n\nParameters:\n * param - Some parameter\n\nReturns:\n * MouseBind object",
        "name" : "start",
        "parameters" : [
          " * param - Some parameter",
          ""
        ],
        "stripped_doc" : [
          "Start background activity.",
          ""
        ],
        "notes" : [

        ],
        "signature" : "MouseBind:start()",
        "type" : "Method",
        "returns" : [
          " * MouseBind object"
        ],
        "desc" : "Start background activity.",
        "def" : "MouseBind:start()"
      },
      {
        "doc" : "Stop background activity.\n\nParameters:\n * param - Some parameter\n\nReturns:\n * MouseBind object",
        "name" : "stop",
        "parameters" : [
          " * param - Some parameter",
          ""
        ],
        "stripped_doc" : [
          "Stop background activity.",
          ""
        ],
        "notes" : [

        ],
        "signature" : "MouseBind:stop()",
        "type" : "Method",
        "returns" : [
          " * MouseBind object"
        ],
        "desc" : "Stop background activity.",
        "def" : "MouseBind:stop()"
      }
    ],
    "name" : "MouseBind"
  },
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [
      {
        "doc" : "Create a new binding between a mouse event and an action. Returns a\nMouseBinding object. Note that the enable() method must be called before\nit is effective.\n\nParameters:\n * mods - A table or a string containing (as elements, or as substrings with any\n   separator) the keyboard modifiers required, which should be zero or more of the\n   following:\n     \"cmd\", \"command\" or \"⌘\"\n     \"ctrl\", \"control\" or \"⌃\"\n     \"alt\", \"option\" or \"⌥\"\n     \"shift\" or \"⇧\"\n * typeName - A string containing the name of an event type, as described in\n   hs.eventtap.event.types\n * message - A string containing a message to be displayed via hs.alert()\n   when the mouse event has been triggered; if nil, no alert will be shown\n   Note that unlike hs.hotkey, this parameter must be present.\n * fn - A function that will be called when mouse event is detected.\n   It can optionally return two values. Firstly, a boolean, true if the event\n   should be deleted, false if it should propagate to any other applications\n   watching for that event. Secondly, a table of events to post.\n\nReturns: MouseBinding instance, or nil on error.",
        "name" : "new",
        "parameters" : [
          " * mods - A table or a string containing (as elements, or as substrings with any",
          "   separator) the keyboard modifiers required, which should be zero or more of the",
          "   following:",
          "     \"cmd\", \"command\" or \"⌘\"",
          "     \"ctrl\", \"control\" or \"⌃\"",
          "     \"alt\", \"option\" or \"⌥\"",
          "     \"shift\" or \"⇧\"",
          " * typeName - A string containing the name of an event type, as described in",
          "   hs.eventtap.event.types",
          " * message - A string containing a message to be displayed via hs.alert()",
          "   when the mouse event has been triggered; if nil, no alert will be shown",
          "   Note that unlike hs.hotkey, this parameter must be present.",
          " * fn - A function that will be called when mouse event is detected.",
          "   It can optionally return two values. Firstly, a boolean, true if the event",
          "   should be deleted, false if it should propagate to any other applications",
          "   watching for that event. Secondly, a table of events to post.",
          "",
          "Returns: MouseBinding instance, or nil on error."
        ],
        "stripped_doc" : [
          "Create a new binding between a mouse event and an action. Returns a",
          "MouseBinding object. Note that the enable() method must be called before",
          "it is effective.",
          ""
        ],
        "notes" : [

        ],
        "signature" : "MouseBinding.new()",
        "type" : "Function",
        "returns" : [

        ],
        "desc" : "Create a new binding between a mouse event and an action. Returns a",
        "def" : "MouseBinding.new()"
      }
    ],
    "Variable" : [

    ],
    "stripped_doc" : [

    ],
    "desc" : "UNKNOWN DESC",
    "Deprecated" : [

    ],
    "type" : "Module",
    "Constructor" : [

    ],
    "doc" : "",
    "Method" : [
      {
        "doc" : "Enable or disable debugging\n\nParameters:\n * enable - Boolean indicating whether debugging should be on\n\nReturns:\n * Nothing",
        "name" : "debug",
        "parameters" : [
          " * enable - Boolean indicating whether debugging should be on",
          ""
        ],
        "stripped_doc" : [
          "Enable or disable debugging",
          ""
        ],
        "notes" : [

        ],
        "signature" : "MouseBinding:debug(enable)",
        "type" : "Method",
        "returns" : [
          " * Nothing"
        ],
        "desc" : "Enable or disable debugging",
        "def" : "MouseBinding:debug(enable)"
      },
      {
        "doc" : "Disable the binding.\n\nParameters:\n* None\n\nReturns:\n* The Mousebinding instance.",
        "name" : "disable",
        "parameters" : [
          "* None",
          ""
        ],
        "stripped_doc" : [
          "Disable the binding.",
          ""
        ],
        "notes" : [

        ],
        "signature" : "MouseBinding:disable()",
        "type" : "Method",
        "returns" : [
          "* The Mousebinding instance."
        ],
        "desc" : "Disable the binding.",
        "def" : "MouseBinding:disable()"
      },
      {
        "doc" : "Enable the binding.\n\nParameters:\n* None\n\nReturns:\n* The Mousebinding instance.",
        "name" : "enable",
        "parameters" : [
          "* None",
          ""
        ],
        "stripped_doc" : [
          "Enable the binding.",
          ""
        ],
        "notes" : [

        ],
        "signature" : "MouseBinding:enable()",
        "type" : "Method",
        "returns" : [
          "* The Mousebinding instance."
        ],
        "desc" : "Enable the binding.",
        "def" : "MouseBinding:enable()"
      }
    ],
    "Command" : [

    ],
    "Field" : [

    ],
    "items" : [
      {
        "doc" : "Create a new binding between a mouse event and an action. Returns a\nMouseBinding object. Note that the enable() method must be called before\nit is effective.\n\nParameters:\n * mods - A table or a string containing (as elements, or as substrings with any\n   separator) the keyboard modifiers required, which should be zero or more of the\n   following:\n     \"cmd\", \"command\" or \"⌘\"\n     \"ctrl\", \"control\" or \"⌃\"\n     \"alt\", \"option\" or \"⌥\"\n     \"shift\" or \"⇧\"\n * typeName - A string containing the name of an event type, as described in\n   hs.eventtap.event.types\n * message - A string containing a message to be displayed via hs.alert()\n   when the mouse event has been triggered; if nil, no alert will be shown\n   Note that unlike hs.hotkey, this parameter must be present.\n * fn - A function that will be called when mouse event is detected.\n   It can optionally return two values. Firstly, a boolean, true if the event\n   should be deleted, false if it should propagate to any other applications\n   watching for that event. Secondly, a table of events to post.\n\nReturns: MouseBinding instance, or nil on error.",
        "name" : "new",
        "parameters" : [
          " * mods - A table or a string containing (as elements, or as substrings with any",
          "   separator) the keyboard modifiers required, which should be zero or more of the",
          "   following:",
          "     \"cmd\", \"command\" or \"⌘\"",
          "     \"ctrl\", \"control\" or \"⌃\"",
          "     \"alt\", \"option\" or \"⌥\"",
          "     \"shift\" or \"⇧\"",
          " * typeName - A string containing the name of an event type, as described in",
          "   hs.eventtap.event.types",
          " * message - A string containing a message to be displayed via hs.alert()",
          "   when the mouse event has been triggered; if nil, no alert will be shown",
          "   Note that unlike hs.hotkey, this parameter must be present.",
          " * fn - A function that will be called when mouse event is detected.",
          "   It can optionally return two values. Firstly, a boolean, true if the event",
          "   should be deleted, false if it should propagate to any other applications",
          "   watching for that event. Secondly, a table of events to post.",
          "",
          "Returns: MouseBinding instance, or nil on error."
        ],
        "stripped_doc" : [
          "Create a new binding between a mouse event and an action. Returns a",
          "MouseBinding object. Note that the enable() method must be called before",
          "it is effective.",
          ""
        ],
        "notes" : [

        ],
        "signature" : "MouseBinding.new()",
        "type" : "Function",
        "returns" : [

        ],
        "desc" : "Create a new binding between a mouse event and an action. Returns a",
        "def" : "MouseBinding.new()"
      },
      {
        "doc" : "Enable or disable debugging\n\nParameters:\n * enable - Boolean indicating whether debugging should be on\n\nReturns:\n * Nothing",
        "name" : "debug",
        "parameters" : [
          " * enable - Boolean indicating whether debugging should be on",
          ""
        ],
        "stripped_doc" : [
          "Enable or disable debugging",
          ""
        ],
        "notes" : [

        ],
        "signature" : "MouseBinding:debug(enable)",
        "type" : "Method",
        "returns" : [
          " * Nothing"
        ],
        "desc" : "Enable or disable debugging",
        "def" : "MouseBinding:debug(enable)"
      },
      {
        "doc" : "Disable the binding.\n\nParameters:\n* None\n\nReturns:\n* The Mousebinding instance.",
        "name" : "disable",
        "parameters" : [
          "* None",
          ""
        ],
        "stripped_doc" : [
          "Disable the binding.",
          ""
        ],
        "notes" : [

        ],
        "signature" : "MouseBinding:disable()",
        "type" : "Method",
        "returns" : [
          "* The Mousebinding instance."
        ],
        "desc" : "Disable the binding.",
        "def" : "MouseBinding:disable()"
      },
      {
        "doc" : "Enable the binding.\n\nParameters:\n* None\n\nReturns:\n* The Mousebinding instance.",
        "name" : "enable",
        "parameters" : [
          "* None",
          ""
        ],
        "stripped_doc" : [
          "Enable the binding.",
          ""
        ],
        "notes" : [

        ],
        "signature" : "MouseBinding:enable()",
        "type" : "Method",
        "returns" : [
          "* The Mousebinding instance."
        ],
        "desc" : "Enable the binding.",
        "def" : "MouseBinding:enable()"
      }
    ],
    "name" : "MouseBinding"
  }
]
